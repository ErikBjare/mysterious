aspect NameAnalysis {
    syn nta List<IdDecl> Program.predefinedFunctions() {
        List<IdDecl> list = new List<IdDecl>();
        list.add(new IdDecl("read","int"));
        list.add(new IdDecl("print","int"));
        return list;
    }
    syn IdDecl IdUse.decl() = lookup(getID());
    inh IdDecl IdUse.lookup(String name);
    
    eq Program.getChild().lookup(String name){
        for(int i = 0; i < getNumFunction(); i++) {
            if(getFunction(i).getIdDecl().getID().equals(name)) {
                return getFunction(i).getIdDecl();
            }
        }
        for(IdDecl id : predefinedFunctions()) {
            if(id.getID().equals(name)) {
                return id;
            }
        }
        return unknownDecl();
    }

    inh IdDecl Function.lookup(String name);

    eq Function.getBlock(int index).lookup(String name) {
        IdDecl decl = localLookup(name, index);
        return !decl.isUnknown() ? decl : lookup(name);
    }

    eq Function.getParams(int index).lookup(String name) {
        for(int i = 0; i<=index; i++) {
            if (getParams(i).getID().equals(name)) {
                return getParams(i);
            }
        }
        return unknownDecl();
    }

    syn IdDecl Function.localLookup(String name, int until) {
        for (int i = 0; i < getNumParams(); i++) {
            if (getParams(i).getID().equals(name)) {
                return getParams(i);
            }
        }
        for(int i = 0; i<= until; i++) {
            if(getBlock(i) instanceof IdStmt) {
                IdStmt stmt = ((IdStmt) getBlock(i));
                if(stmt.getIdDecl().getID().equals(name)) {
                    return stmt.getIdDecl();
                }
            }
        }
        return unknownDecl();
    }
    
    inh IdDecl WhileStmt.lookup(String name);

    eq WhileStmt.getStmt(int index).lookup(String name) {
        IdDecl decl = localLookup(name, index);
        return !decl.isUnknown() ? decl : lookup(name);
    }

    syn IdDecl WhileStmt.localLookup(String name, int until) {
         for(int i = 0; i<= until; i++) {
            if(getStmt(i) instanceof IdStmt) {
                IdStmt stmt = ((IdStmt) getStmt(i));
                if(stmt.getIdDecl().getID().equals(name)) {
                    return stmt.getIdDecl();
                }
            }
        }
        return unknownDecl();
    }

    inh IdDecl IfBlock.lookup(String name);

    eq IfBlock.getStmt(int index).lookup(String name) {
        IdDecl decl = localLookup(name, index);
        return !decl.isUnknown() ? decl : lookup(name);
    }

    syn IdDecl IfBlock.localLookup(String name, int until) {
         for(int i = 0; i<= until; i++) {
            if(getStmt(i) instanceof IdStmt) {
                IdStmt stmt = ((IdStmt) getStmt(i));
                if(stmt.getIdDecl().getID().equals(name)) {
                    return stmt.getIdDecl();
                }
            }
        }
        return unknownDecl();
    }

    inh IdDecl ElseBlock.lookup(String name);

    eq ElseBlock.getStmt(int index).lookup(String name) {
        IdDecl decl = localLookup(name, index);
        return !decl.isUnknown() ? decl : lookup(name);
    }

    syn IdDecl ElseBlock.localLookup(String name, int until) {
         for(int i = 0; i<= until; i++) {
            if(getStmt(i) instanceof IdStmt) {
                IdStmt stmt = ((IdStmt) getStmt(i));
                if(stmt.getIdDecl().getID().equals(name)) {
                    return stmt.getIdDecl();
                }
            }
        }
        return unknownDecl();
    }    


    inh IdDecl IdDecl.lookup(String name);
    syn boolean IdDecl.isMultiplyDeclared() = lookup(getID()) != this;
}
aspect CircularDefinitions {
    /* Identify circular definitions in let expressions */
    syn boolean IdUse.isCircular() = inExprOf(decl());
    inh boolean IdUse.inExprOf(IdDecl decl);
    inh boolean IdStmt.inExprOf(IdDecl decl);
    eq IdStmt.getExpr().inExprOf(IdDecl decl)
        = getIdDecl() == decl || inExprOf(decl);
    eq Program.getChild().inExprOf(IdDecl decl) = false;
}