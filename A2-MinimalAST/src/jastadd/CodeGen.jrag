/**
 * @author jesper.oqvist@cs.lth.se
 */
aspect CodeGen {

    public void Program.genCode(PrintStream out) {
        out.println(".global _start");
        out.println(".data");
        out.println("buf: .skip 1024");
        out.println();

        // etc.
        out.println(".text");
        out.println("_start:");

        out.println("        call main");

        // call sys_exit
		out.println("        movq %rax, %rdi");
		out.println("        movq $60, %rax");
		out.println("        syscall");

        // call main function
        for (Function decl: getFunctionList()) {
            decl.genCode(out);
        }

        // helper procedures (print/read)
        genHelpers(out);
    }

    public void Function.genCode(PrintStream out) {
        // TODO: What if function doesn't have a return stmt?
        String uName = getIdDecl().getID();
		out.println(uName + ":");
		out.println("        pushq %rbp");
		out.println("        movq %rsp, %rbp");
        getBlock().genCode(out, getIdDecl().getID());

		out.println(uName + "_done:");
        out.println("        movq %rbp, %rsp");
        out.println("        popq %rbp");
        out.println("        ret");
    }

    /**
     * Statements.
     */

    public void Stmt.genCode(PrintStream out, String uName) {
        return;
    }

    public void ExpressionStmt.genCode(PrintStream out, String uName) {
        getExpr().genEval(out);
    }

    public void IdStmt.genCode(PrintStream out, String uName) {
        if(hasExpr()) {
            getExpr().genEval(out);
        } else {
            out.println("        movq $0, %rax");
        }
        out.println("        pushq %rax");
    }

    public void Assign.genCode(PrintStream out, String uName) {
        getExpr().genEval(out);
        out.println("        movq %rax, " + getVar().decl().address());
    }

    public void Return.genCode(PrintStream out, String uName) {
        getExpr().genEval(out);
        uName = uName.substring(0,uName.indexOf('_'));
        out.println("        jmp " + uName + "_done");
    }

    public void Block.genCode(PrintStream out, String uName) {
        int i = 0;
        for(Stmt s : getStmtList()) {
            s.genCode(out, uName + "_" + i);
            i++;
        }
    }

    public void WhileStmt.genCode(PrintStream out, String uName) {
        String sl = "while_" + uName;
        String el = "end" + sl;
        out.println(sl + ": ");
        getCondition().genEval(out);
        out.println(" " + el);
        getBlock().genCode(out, uName);
        out.println("        jmp " + sl);
        out.println(el + ": ");
    }
	/**
 	 * Generate code to evaluate the expression and
 	 * store the result in RAX.
 	 *
 	 * This must be implemented for every subclass of Expr!
 	 */

    // TODO!
	abstract public void Expr.genEval(PrintStream out);

    public void FunctionCall.genEval(PrintStream out) {
        for(int i = getNumExpr() - 1; i>=0; i--) {
            getExpr(i).genEval(out);
            out.println("        pushq %rax");
        }
        out.println("        call " + getName().getID());
        for(int i = getNumExpr() - 1; i>=0; i--) {
            out.println("        popq %rbx");
        }
    }

	public void Literal.genEval(PrintStream out) {
		out.println("        movq $" + getLITERAL() + ", %rax");
	}

	public void IdUse.genEval(PrintStream out) {
		out.println("        movq " + decl().address() + ", %rax");
	}

	public void Mul.genEval(PrintStream out) {
		getLeft().genEval(out);
		out.println("        pushq %rax");
		getRight().genEval(out);
		out.println("        movq %rax, %rbx");
		out.println("        popq %rax");
		out.println("        imulq %rbx, %rax");
	}

	public void Div.genEval(PrintStream out) {
		getLeft().genEval(out);
		out.println("        pushq %rax");
		getRight().genEval(out);
		out.println("        movq %rax, %rbx");
		out.println("        popq %rax");
		out.println("        movq $0, %rdx");// NB: clear RDX to prepare division RDX:RAX / RBX
		out.println("        idivq %rbx");
	}

    // TODO!
	public void Mod.genEval(PrintStream out) {
		getLeft().genEval(out);
		out.println("        pushq %rax");
		getRight().genEval(out);
		out.println("        movq %rax, %rbx");
		out.println("        popq %rax");
		out.println("        movq $0, %rdx");// NB: clear RDX to prepare division RDX:RAX / RBX
		out.println("        idivq %rbx");
		out.println("        movq %rdx, %rax"); //Moves remainder to RAX.
	}

	public void Add.genEval(PrintStream out) {
		getLeft().genEval(out);
		out.println("        pushq %rax");
		getRight().genEval(out);
		out.println("        movq %rax, %rbx");
		out.println("        popq %rax");
		out.println("        addq %rbx, %rax");
	}

	public void Sub.genEval(PrintStream out) {
		getLeft().genEval(out);
		out.println("        pushq %rax");
		getRight().genEval(out);
		out.println("        movq %rax, %rbx");
		out.println("        popq %rax");
		out.println("        subq %rbx, %rax");
	}

    // TODO!
	public void Equals.genEval(PrintStream out) {
		getLeft().genEval(out);
		out.println("        pushq %rax");
		getRight().genEval(out);
		out.println("        movq %rax, %rbx");
		out.println("        popq %rax");
		out.println("        cmp %rbx, %rax");
		out.print("        jne");
	}

    // TODO!
	public void NotEq.genEval(PrintStream out) {
		getLeft().genEval(out);
		out.println("        pushq %rax");
		getRight().genEval(out);
		out.println("        movq %rax, %rbx");
		out.println("        popq %rax");
		out.println("        cmp %rbx, %rax");
		out.print("        je");
	}

    // TODO!
	public void GreaterThan.genEval(PrintStream out) {
		getLeft().genEval(out);
		out.println("        pushq %rax");
		getRight().genEval(out);
		out.println("        movq %rax, %rbx");
		out.println("        popq %rax");
		out.println("        cmp %rbx, %rax");
		out.print("       jle");
	}

    // TODO!
	public void GreaterThanEq.genEval(PrintStream out) {
		getLeft().genEval(out);
		out.println("        pushq %rax");
		getRight().genEval(out);
		out.println("        movq %rax, %rbx");
		out.println("        popq %rax");
		out.println("        cmp %rbx, %rax");
		out.print("        jl");
	}

    // TODO! prints jump instruction, but where will be decided by parent.
	public void LessThan.genEval(PrintStream out) {
		getLeft().genEval(out);
		out.println("        pushq %rax");
		getRight().genEval(out);
		out.println("        movq %rax, %rbx");
		out.println("        popq %rax");
		out.println("        cmp %rbx, %rax");
		out.print("        jge");
	}

    // TODO!
	public void LessThanEq.genEval(PrintStream out) {
		getLeft().genEval(out);
		out.println("        pushq %rax");
		getRight().genEval(out);
		out.println("        movq %rax, %rbx");
		out.println("        popq %rax");
		out.println("        cmp %rbx, %rax");
		out.print("        jg");
	}

    // TODO!
    /*
	public void Let.genEval(PrintStream out) {
		// evaluate bindings:
		for (int i = 0; i < getNumBinding(); ++i) {
			getBinding(i).genCode(out);
		}
		getExpr().genEval(out);
	}
    */

    // TODO!
    /*
	public void Ask.genEval(PrintStream out) {
		out.println("        pushq ask_msg_len");
		out.println("        pushq $ask_message");
		out.println("        call print_string");
		out.println("        addq $16, %rsp");
		out.println("        call read");
	}
    */

    // TODO!
    /*
	public void Binding.genCode(PrintStream out) {
		getExpr().genEval(out);
		out.println("        movq %rax, " + getIdDecl().address());
	}
    */

	/**
 	 * Address of local variable variable in the current stack frame.
 	 */
	syn String IdDecl.address() = "" + (-localIndex()*8)+"(%rbp)";

	/**
 	 * Local variable counting.
 	 */
	syn int ASTNode.numLocals() = lastNode().localIndex() - localIndex();

	/**
 	 * Local variable numbering.
 	 */
	syn int ASTNode.localIndex() = prevNode().localIndex();
	inh int Block.localIndex();
	inh int IdDecl.localIndex();
	eq UnknownDecl.localIndex() = 0;
	eq Function.getBlock().localIndex() = 0;
	eq IdStmt.getIdDecl().localIndex() = localIndex() + 1;
	eq Function.getParams(int i).localIndex() = -(2+i);
	eq Function.getIdDecl().localIndex() = 0;
	eq Program.localIndex() = 0;
	inh ASTNode ASTNode.prevNode();
	eq ASTNode.getChild(int i).prevNode() = prevNode(i);
	syn ASTNode ASTNode.lastNode() = prevNode(getNumChild());
	syn ASTNode ASTNode.prevNode(int i) = i>0 ? getChild(i-1).lastNode() : this;


    public void Program.genHelpers(PrintStream out) {
		// helper functions
		out.println("# Procedure to read number from stdin");
		out.println("# C signature: long int read(void)");
		out.println("read:");
		out.println("        pushq %rbp");
		out.println("        movq %rsp, %rbp");
		out.println("        movq $0, %rdi");
		out.println("        movq $buf, %rsi");
		out.println("        movq $1024, %rdx");
		out.println("        movq $0, %rax");
		out.println("        syscall                 # %rax = sys_read(0, buf, 1024)");
		out.println("        ### convert string to integer:");
		out.println("        ### %rax contains nchar");
		out.println("        ### %rsi contains ptr");
		out.println("        movq $0, %rdx           # sum = 0");
		out.println("atoi_loop:");
		out.println("        cmpq $0, %rax           # while (nchar > 0)");
		out.println("        jle atoi_done           # leave loop if nchar <= 0");
		out.println("        movzbq (%rsi), %rbx     # move byte, and sign extend to qword");
		out.println("        cmpq $0x30, %rbx        # test if < '0'");
		out.println("        jl atoi_done            # character is not numeric");
		out.println("        cmpq $0x39, %rbx        # test if > '9'");
		out.println("        jg atoi_done            # character is not numeric");
		out.println("        imulq $10, %rdx         # multiply sum by 10");
		out.println("        subq $0x30, %rbx        # value of character");
		out.println("        addq %rbx, %rdx         # add to sum");
		out.println("        incq %rsi               # step to next char");
		out.println("        decq %rax               # nchar--");
		out.println("        jmp atoi_loop           # loop back");
		out.println("atoi_done:");
		out.println("        movq %rdx, %rax         # return value in RAX");
		out.println("        popq %rbp");
		out.println("        ret");
		out.println();
		out.println("# Procedure to print number to stdout");
		out.println("# C signature: void print(long int)");
		out.println("print:");
		out.println("        pushq %rbp");
		out.println("        movq %rsp, %rbp");
		out.println("        ### convert integer to string");
		out.println("        movq 16(%rbp), %rax     # parameter");
		out.println("        movq $(buf+1023), %rsi  # write ptr (start from end of buf)");
		out.println("        movb $0x0a, (%rsi)      # insert newline");
		out.println("        movq $1, %rcx           # string length");
		out.println("itoa_loop:                      # do.. while (at least one iteration)");
		out.println("        movq $10, %rbx");
		out.println("        movq $0, %rdx");
		out.println("        idivq %rbx              # divide rdx:rax by 10");
		out.println("        addb $0x30, %dl         # remainder + '0'");
		out.println("        decq %rsi               # move string pointer");
		out.println("        movb %dl, (%rsi)");
		out.println("        incq %rcx               # increment string length");
		out.println("        cmpq $0, %rax");
		out.println("        jg itoa_loop            # produce more digits");
		out.println("itoa_done:");
		out.println("        movq $1, %rdi");
		out.println("        movq %rcx, %rdx");
		out.println("        movq $1, %rax");
		out.println("        syscall");
		out.println("        popq %rbp");
		out.println("        ret");
		out.println();
		out.println("print_string:");
		out.println("        pushq %rbp");
		out.println("        movq %rsp, %rbp");
		out.println("        movq $1, %rdi");
		out.println("        movq 16(%rbp), %rsi");
		out.println("        movq 24(%rbp), %rdx");
		out.println("        movq $1, %rax");
		out.println("        syscall");
		out.println("        popq %rbp");
		out.println("        ret");
    }

}
