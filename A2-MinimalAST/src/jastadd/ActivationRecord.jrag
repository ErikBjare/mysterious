import java.util.HashMap;
aspect ActivationRecord {
    public void Program.eval() {
        for(Function f: getFunctionList()) {
            if(f.getIdDecl().getID().equals("main")) {
                f.eval(new ActivationRecord());
                return;
            }
        }
        throw new RuntimeException();
    }
    public int Function.eval(ActivationRecord actrec) {
        int r = getBlock().eval(actrec);
        if(actrec.hasR()) return actrec.getR();
        else return 0;
    }
    public int Block.eval(ActivationRecord actrec) {
        //System.out.println(getNumStmt());
        for(Stmt s: getStmtList()) {
            if(actrec.hasR()) return 0;
            //System.out.println(s.getClass().getName());
            s.eval(actrec);
        }
        return 0;
    }

    public int Stmt.eval(ActivationRecord actrec)  { throw new RuntimeException(); }

    public int Assign.eval(ActivationRecord actrec) {
        actrec.put(getVar().getID(), getExpr().eval(actrec));
        //System.out.println(getExpr().eval(actrec));
        return -1;
    }
    public int IdStmt.eval(ActivationRecord actrec) {
        if(hasExpr()) {
            actrec.put(getIdDecl().getID(), getExpr().eval(actrec));
            //System.out.println(getExpr().eval(actrec));
        }
        return -1;
    }

    public int ExpressionStmt.eval(ActivationRecord actrec) {
        return getExpr().eval(actrec);
    }

    public int Expr.eval(ActivationRecord actrec) { throw new RuntimeException(); }

    public int Literal.eval(ActivationRecord actrec) {
        return Integer.parseInt(getLITERAL());
    }

    public int Return.eval(ActivationRecord actrec) {
        actrec.put("return", getExpr().eval(actrec));
        return 0;
    }

    public int IdUse.eval(ActivationRecord actrec) {
        return actrec.get(getID());
    }

    public int FunctionCall.eval(ActivationRecord actrec) {
        IdDecl Fdecl = getName().decl();

        for(IdDecl id: predefinedFunctions()) {
            if(Fdecl == id){
                if(Fdecl.getID().equals("print")) System.out.println(getExpr(0).eval(actrec));
                return 0;
            }
        }

        for(Function f: functions()) {
            if(f.getIdDecl() == Fdecl) {
                ActivationRecord ar = new ActivationRecord();
                for(int i = 0; i<f.getNumParams(); ++i) {
                    ar.put(f.getParams(i).getID(), getExpr(i).eval(actrec));
                }
                return f.eval(ar);
            }
        }

        return 0;
    }


    // Arithmetic operations
    public int Add.eval(ActivationRecord actrec) {
        return getLeft().eval(actrec) + getRight().eval(actrec);
    }
    public int Sub.eval(ActivationRecord actrec) {
        return getLeft().eval(actrec) - getRight().eval(actrec);
    }
    public int Mul.eval(ActivationRecord actrec) {
        return getLeft().eval(actrec) * getRight().eval(actrec);
    }
    public int Mod.eval(ActivationRecord actrec) {
        return getLeft().eval(actrec) % getRight().eval(actrec);
    }

    // Boolean operations
    public int LessThan.eval(ActivationRecord actrec) {
        return getLeft().eval(actrec) < getRight().eval(actrec) ? 1 : 0;
    }
    public int LessThanEq.eval(ActivationRecord actrec) {
        return getLeft().eval(actrec) <= getRight().eval(actrec) ? 1 : 0;
    }
    public int GreaterThan.eval(ActivationRecord actrec) {
        return getLeft().eval(actrec) > getRight().eval(actrec) ? 1 : 0;
    }
    public int GreaterThanEq.eval(ActivationRecord actrec) {
        return getLeft().eval(actrec) >= getRight().eval(actrec) ? 1 : 0;
    }
    public int NotEq.eval(ActivationRecord actrec) {
        return getLeft().eval(actrec) != getRight().eval(actrec) ? 1 : 0;
    }


    public class ActivationRecord {
        HashMap<String,Integer> map = new HashMap<>();
        public ActivationRecord() {

        }
        public void put(String s, int i) {
            map.put(s,i);
        }
        public int get(String s) {
            return map.get(s);
        }
        public boolean hasR() {
            return map.containsKey("return");
        }
        public int getR() {
            return map.get("return");
        }

    }
}
