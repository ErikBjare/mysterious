Program ::= Function*;
Function ::= IdDecl Params:IdDecl* Block:Stmt*;


abstract Stmt;
IdDecl:Stmt ::= <ID:String> <TYPE:String> [Expr];
Assign:Stmt ::= Var:IdUse Expr;
Return:Stmt ::= Expr;

IfStmt:Stmt ::= IfBlock:Stmt ElIfBlocks:Stmt* [ElseBlock:Stmt];
IfBlock:Stmt ::= Condition:Expr Stmt*;
ElseBlock:Stmt ::= Stmt*;

WhileStmt:Stmt ::= Condition:Expr Stmt*;
ForStmt:Stmt ::= [A:Expr] [B:Expr] [C:Expr] Stmt*;


abstract Expr;
Add:Expr ::= L:Expr R:Expr;
Mul:Expr ::= L:Expr R:Expr;
Sub:Expr ::= L:Expr R:Expr;
Mod:Expr ::= L:Expr R:Expr;
LessThan:Expr ::= L:Expr R:Expr;
GreaterThan:Expr ::= L:Expr R:Expr;
LessThanEq:Expr ::= L:Expr R:Expr;
GreaterThanEq:Expr ::= L:Expr R:Expr;
NotEq:Expr ::= L:Expr R:Expr;
Equals:Expr ::= L:Expr R:Expr;

IdUse:Expr ::= <ID:String>;
Literal:Expr ::= <LITERAL:String>;
FunctionCall:Expr ::= Name:IdUse Expr*;
