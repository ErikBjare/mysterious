Program ::= Function*;
Function ::= IdDecl Params:IdDecl* Block:Stmt*;

IdDecl ::= <ID:String> <TYPE:String>;
UnknownDecl: IdDecl;

abstract Stmt;
Assign:Stmt ::= Var:IdUse Expr;
IdStmt:Stmt ::= IdDecl [Expr];
Return:Stmt ::= Expr;
ExpressionStmt:Stmt ::= Expr;

IfStmt:Stmt ::= IfBlock:Stmt ElIfBlocks:Stmt* [ElseBlock:Stmt];
IfBlock:Stmt ::= Condition:Expr Stmt*;
ElseBlock:Stmt ::= Stmt*;

WhileStmt:Stmt ::= Condition:Expr Stmt*;
ForStmt:Stmt ::= [A:Expr] [B:Expr] [C:Expr] Stmt*;


abstract Expr;
IdUse:Expr ::= <ID:String>;
Literal:Expr ::= <LITERAL:String>;
FunctionCall:Expr ::= Name:IdUse Expr*;

abstract BinExpr:Expr ::= Left:Expr Right:Expr;
Add:BinExpr;
Mul:BinExpr;
Sub:BinExpr;
Mod:BinExpr;
LessThan:BinExpr;
GreaterThan:BinExpr;
LessThanEq:BinExpr;
GreaterThanEq:BinExpr;
NotEq:BinExpr;
Equals:BinExpr;
